// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const getDetails = `-- name: GetDetails :one
SELECT title, version, processingsize, processingspeed, processingtime, firsteventtime, lasteventtime FROM details
LIMIT 1
`

func (q *Queries) GetDetails(ctx context.Context) (Detail, error) {
	row := q.db.QueryRowContext(ctx, getDetails)
	var i Detail
	err := row.Scan(
		&i.Title,
		&i.Version,
		&i.Processingsize,
		&i.Processingspeed,
		&i.Processingtime,
		&i.Firsteventtime,
		&i.Lasteventtime,
	)
	return i, err
}

const getProcesses = `-- name: GetProcesses :many
SELECT name, catalog, process, processid, processtype, pid, port, uid, servername, ip, firsteventtime, lasteventtime FROM processes 
WHERE name in (/*SLICE:names*/?)
`

func (q *Queries) GetProcesses(ctx context.Context, names []sql.NullString) ([]Process, error) {
	query := getProcesses
	var queryParams []interface{}
	if len(names) > 0 {
		for _, v := range names {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:names*/?", strings.Repeat(",?", len(names))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:names*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Process
	for rows.Next() {
		var i Process
		if err := rows.Scan(
			&i.Name,
			&i.Catalog,
			&i.Process,
			&i.Processid,
			&i.Processtype,
			&i.Pid,
			&i.Port,
			&i.Uid,
			&i.Servername,
			&i.Ip,
			&i.Firsteventtime,
			&i.Lasteventtime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveDetails = `-- name: SaveDetails :exec
INSERT INTO details (
    title, version, 
    processingSize, processingSpeed, processingTime,
    firstEventTime, lastEventTime  
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
`

type SaveDetailsParams struct {
	Title           string
	Version         string
	Processingsize  int64
	Processingspeed float64
	Processingtime  int64
	Firsteventtime  time.Time
	Lasteventtime   time.Time
}

func (q *Queries) SaveDetails(ctx context.Context, arg SaveDetailsParams) error {
	_, err := q.db.ExecContext(ctx, saveDetails,
		arg.Title,
		arg.Version,
		arg.Processingsize,
		arg.Processingspeed,
		arg.Processingtime,
		arg.Firsteventtime,
		arg.Lasteventtime,
	)
	return err
}
